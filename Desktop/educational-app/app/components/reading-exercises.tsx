"use client"

import { useState, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { ArrowLeft, Volume2, Check, BookOpen, RotateCcw, Star, Eye, Book } from "lucide-react"

interface ReadingExercisesProps {
  onBack: () => void
  progress: any
  setProgress: (progress: any) => void
  lang: 'fr' | 'es' | 'en'
  setLang: (lang: 'fr' | 'es' | 'en') => void
}

const translations = {
  fr: {
    reading: 'üìö Lecture',
    back: 'Retour',
    level: 'Niveau',
    beginner: 'D√©butant',
    intermediate: 'Interm√©diaire',
    advanced: 'Avanc√©',
    listenStory: '√âcouter l\'histoire',
    seeQuestions: 'Voir les questions',
    comprehensionQuestions: 'Questions de compr√©hension',
    yourAnswer: 'Ta r√©ponse',
    checkAnswers: 'V√©rifier mes r√©ponses',
    results: 'R√©sultats',
    score: 'Score',
    correctAnswers: 'bonnes r√©ponses',
    restart: 'Recommencer',
    nextStory: 'Histoire suivante',
    story: 'Histoire',
    of: 'sur',
    developComprehension: 'D√©veloppe ta compr√©hension !',
    simpleStories: 'Histoires simples',
    shortTexts: 'Textes courts',
    basicQuestions: 'Questions basiques',
    longerStories: 'Histoires plus longues',
    vocabulary: 'Vocabulaire enrichi',
    complexQuestions: 'Questions complexes',
    advancedStories: 'Histoires avanc√©es',
    richVocabulary: 'Vocabulaire riche',
    detailedQuestions: 'Questions d√©taill√©es',
    progress: 'Mes Progr√®s en Lecture',
  },
  es: {
    reading: 'üìö Lectura',
    back: 'Volver',
    level: 'Nivel',
    beginner: 'Principiante',
    intermediate: 'Intermedio',
    advanced: 'Avanzado',
    listenStory: 'Escuchar la historia',
    seeQuestions: 'Ver las preguntas',
    comprehensionQuestions: 'Preguntas de comprensi√≥n',
    yourAnswer: 'Tu respuesta',
    checkAnswers: 'Verificar mis respuestas',
    results: 'Resultados',
    score: 'Puntuaci√≥n',
    correctAnswers: 'respuestas correctas',
    restart: 'Reiniciar',
    nextStory: 'Siguiente historia',
    story: 'Historia',
    of: 'de',
    developComprehension: '¬°Desarrolla tu comprensi√≥n!',
    simpleStories: 'Historias simples',
    shortTexts: 'Textos cortos',
    basicQuestions: 'Preguntas b√°sicas',
    longerStories: 'Historias m√°s largas',
    vocabulary: 'Vocabulario enriquecido',
    complexQuestions: 'Preguntas complejas',
    advancedStories: 'Historias avanzadas',
    richVocabulary: 'Vocabulario rico',
    detailedQuestions: 'Preguntas detalladas',
    progress: 'Mi Progreso en Lectura',
  },
  en: {
    reading: 'üìö Reading',
    back: 'Back',
    level: 'Level',
    beginner: 'Beginner',
    intermediate: 'Intermediate',
    advanced: 'Advanced',
    listenStory: 'Listen to the story',
    seeQuestions: 'See the questions',
    comprehensionQuestions: 'Comprehension questions',
    yourAnswer: 'Your answer',
    checkAnswers: 'Check my answers',
    results: 'Results',
    score: 'Score',
    correctAnswers: 'correct answers',
    restart: 'Restart',
    nextStory: 'Next story',
    story: 'Story',
    of: 'of',
    developComprehension: 'Develop your comprehension!',
    simpleStories: 'Simple stories',
    shortTexts: 'Short texts',
    basicQuestions: 'Basic questions',
    longerStories: 'Longer stories',
    vocabulary: 'Enriched vocabulary',
    complexQuestions: 'Complex questions',
    advancedStories: 'Advanced stories',
    richVocabulary: 'Rich vocabulary',
    detailedQuestions: 'Detailed questions',
    progress: 'My Reading Progress',
  },
}

type ReadingStory = {
  title: string;
  text: string;
  questions: { question: string; answer: string }[];
  theme: string;
  emoji: string;
};

type ReadingStoriesByLevel = {
  beginner: ReadingStory[];
  intermediate: ReadingStory[];
  advanced: ReadingStory[];
};

type ReadingStoriesByLang = {
  fr: ReadingStoriesByLevel;
  es: ReadingStoriesByLevel;
  en: ReadingStoriesByLevel;
};

const readingStories: ReadingStoriesByLang = {
  fr: {
    beginner: [
      {
        title: "Le Petit Chat Curieux",
        text: "Il √©tait une fois un petit chat nomm√© Mimi. Mimi aimait explorer le jardin derri√®re sa maison. Un jour, elle d√©couvrit une souris qui jouait pr√®s du potager.",
        questions: [
          { question: "Comment s'appelle le petit chat?", answer: "Mimi" },
          { question: "O√π Mimi aimait-elle explorer?", answer: "le jardin" },
          { question: "Qu'est-ce que Mimi d√©couvrit?", answer: "une souris" }
        ],
        theme: "animals",
        emoji: "üê±"
      },
      {
        title: "L'Aventure de Tom le Robot",
        text: "Tom √©tait un petit robot qui vivait dans une ville futuriste. Il avait des yeux bleus brillants et des mains en m√©tal. Tom aimait aider les autres robots.",
        questions: [
          { question: "Comment s'appelle le robot?", answer: "Tom" },
          { question: "De quelle couleur √©taient ses yeux?", answer: "bleus" },
          { question: "Que faisait Tom?", answer: "aidait les autres robots" }
        ],
        theme: "robots",
        emoji: "ü§ñ"
      }
    ],
    intermediate: [
      {
        title: "La For√™t Enchant√©e",
        text: "Dans une for√™t myst√©rieuse, vivait une famille de lapins magiques. Les arbres parlaient et les fleurs chantaient. Un jour, un petit lapin blanc d√©couvrit un livre ancien sous un grand ch√™ne.",
        questions: [
          { question: "Qui vivait dans la for√™t?", answer: "une famille de lapins magiques" },
          { question: "Que faisaient les arbres?", answer: "ils parlaient" },
          { question: "Que d√©couvrit le petit lapin?", answer: "un livre ancien" }
        ],
        theme: "fantasy",
        emoji: "üå≥"
      },
      {
        title: "Le Voyage Spatial",
        text: "L'astronaute Sarah regardait par la fen√™tre de sa navette spatiale. Elle voyait la Terre, bleue et belle, depuis l'espace. Les √©toiles brillaient comme des diamants dans le ciel noir.",
        questions: [
          { question: "Comment s'appelle l'astronaute?", answer: "Sarah" },
          { question: "Que voyait-elle par la fen√™tre?", answer: "la Terre" },
          { question: "√Ä quoi ressemblaient les √©toiles?", answer: "des diamants" }
        ],
        theme: "space",
        emoji: "üöÄ"
      }
    ],
    advanced: [
      {
        title: "Le Myst√®re du Ch√¢teau",
        text: "Le jeune d√©tective Lucas marchait dans les couloirs sombres du ch√¢teau abandonn√©. Des bruits √©tranges r√©sonnaient dans les murs. Soudain, il trouva une vieille cl√© en or cach√©e derri√®re un tableau.",
        questions: [
          { question: "Quel √©tait le m√©tier de Lucas?", answer: "d√©tective" },
          { question: "O√π se trouvait Lucas?", answer: "dans un ch√¢teau abandonn√©" },
          { question: "Que trouva Lucas?", answer: "une vieille cl√© en or" }
        ],
        theme: "mystery",
        emoji: "üè∞"
      }
    ]
  },
  es: {
    beginner: [
      {
        title: "El Gatito Curioso",
        text: "Hab√≠a una vez un gatito llamado Mimi. Mimi le gustaba explorar el jard√≠n detr√°s de su casa. Un d√≠a, descubri√≥ un rat√≥n que jugaba cerca de la huerta.",
        questions: [
          { question: "¬øC√≥mo se llama el gatito?", answer: "Mimi" },
          { question: "¬øD√≥nde le gustaba explorar a Mimi?", answer: "el jard√≠n" },
          { question: "¬øQu√© descubri√≥ Mimi?", answer: "un rat√≥n" }
        ],
        theme: "animals",
        emoji: "üê±"
      },
      {
        title: "La Aventura de Tom el Robot",
        text: "Tom era un peque√±o robot que viv√≠a en una ciudad futurista. Ten√≠a ojos azules brillantes y manos de metal. A Tom le gustaba ayudar a los otros robots.",
        questions: [
          { question: "¬øC√≥mo se llama el robot?", answer: "Tom" },
          { question: "¬øDe qu√© color eran sus ojos?", answer: "azules" },
          { question: "¬øQu√© hac√≠a Tom?", answer: "ayudaba a los otros robots" }
        ],
        theme: "robots",
        emoji: "ü§ñ"
      }
    ],
    intermediate: [
      {
        title: "El Bosque Encantado",
        text: "En un bosque misterioso, viv√≠a una familia de conejos m√°gicos. Los √°rboles hablaban y las flores cantaban. Un d√≠a, un conejito blanco descubri√≥ un libro antiguo bajo un gran roble.",
        questions: [
          { question: "¬øQui√©n viv√≠a en el bosque?", answer: "una familia de conejos m√°gicos" },
          { question: "¬øQu√© hac√≠an los √°rboles?", answer: "hablaban" },
          { question: "¬øQu√© descubri√≥ el conejito?", answer: "un libro antiguo" }
        ],
        theme: "fantasy",
        emoji: "üå≥"
      },
      {
        title: "El Viaje Espacial",
        text: "La astronauta Sara miraba por la ventana de su nave espacial. Ve√≠a la Tierra, azul y hermosa, desde el espacio. Las estrellas brillaban como diamantes en el cielo negro.",
        questions: [
          { question: "¬øC√≥mo se llama la astronauta?", answer: "Sara" },
          { question: "¬øQu√© ve√≠a por la ventana?", answer: "la Tierra" },
          { question: "¬øA qu√© se parec√≠an las estrellas?", answer: "a diamantes" }
        ],
        theme: "space",
        emoji: "üöÄ"
      }
    ],
    advanced: [
      {
        title: "El Misterio del Castillo",
        text: "El joven detective Lucas caminaba por los pasillos oscuros del castillo abandonado. Ruidos extra√±os resonaban en las paredes. De repente, encontr√≥ una vieja llave de oro escondida detr√°s de un cuadro.",
        questions: [
          { question: "¬øCu√°l era el oficio de Lucas?", answer: "detective" },
          { question: "¬øD√≥nde estaba Lucas?", answer: "en un castillo abandonado" },
          { question: "¬øQu√© encontr√≥ Lucas?", answer: "una vieja llave de oro" }
        ],
        theme: "mystery",
        emoji: "üè∞"
      }
    ]
  },
  en: {
    beginner: [
      {
        title: "The Curious Little Cat",
        text: "Once upon a time, there was a little cat named Mimi. Mimi loved to explore the garden behind her house. One day, she discovered a mouse playing near the vegetable patch.",
        questions: [
          { question: "What is the little cat's name?", answer: "Mimi" },
          { question: "Where did Mimi like to explore?", answer: "the garden" },
          { question: "What did Mimi discover?", answer: "a mouse" }
        ],
        theme: "animals",
        emoji: "üê±"
      },
      {
        title: "Tom the Robot's Adventure",
        text: "Tom was a little robot who lived in a futuristic city. He had bright blue eyes and metal hands. Tom liked to help the other robots.",
        questions: [
          { question: "What is the robot's name?", answer: "Tom" },
          { question: "What color were his eyes?", answer: "blue" },
          { question: "What did Tom do?", answer: "helped the other robots" }
        ],
        theme: "robots",
        emoji: "ü§ñ"
      }
    ],
    intermediate: [
      {
        title: "The Enchanted Forest",
        text: "In a mysterious forest lived a family of magical rabbits. The trees talked and the flowers sang. One day, a little white rabbit discovered an old book under a big oak tree.",
        questions: [
          { question: "Who lived in the forest?", answer: "a family of magical rabbits" },
          { question: "What did the trees do?", answer: "they talked" },
          { question: "What did the little rabbit discover?", answer: "an old book" }
        ],
        theme: "fantasy",
        emoji: "üå≥"
      },
      {
        title: "The Space Journey",
        text: "Astronaut Sarah looked out the window of her spaceship. She saw the Earth, blue and beautiful, from space. The stars shone like diamonds in the black sky.",
        questions: [
          { question: "What is the astronaut's name?", answer: "Sarah" },
          { question: "What did she see out the window?", answer: "the Earth" },
          { question: "What did the stars look like?", answer: "diamonds" }
        ],
        theme: "space",
        emoji: "üöÄ"
      }
    ],
    advanced: [
      {
        title: "The Mystery of the Castle",
        text: "Young detective Lucas walked through the dark halls of the abandoned castle. Strange noises echoed in the walls. Suddenly, he found an old golden key hidden behind a painting.",
        questions: [
          { question: "What was Lucas's job?", answer: "detective" },
          { question: "Where was Lucas?", answer: "in an abandoned castle" },
          { question: "What did Lucas find?", answer: "an old golden key" }
        ],
        theme: "mystery",
        emoji: "üè∞"
      }
    ]
  }
};

export default function ReadingExercises({ onBack, progress, setProgress, lang, setLang }: ReadingExercisesProps) {
  const [currentLevel, setCurrentLevel] = useState<string | null>(null)
  const [currentStory, setCurrentStory] = useState(0)
  const [showQuestions, setShowQuestions] = useState(false)
  const [userAnswers, setUserAnswers] = useState<string[]>([])
  const [score, setScore] = useState(0)
  const [showResults, setShowResults] = useState(false)
  const t = translations[lang];

  const speakText = (text: string) => {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text)
      utterance.lang = 'fr-FR'
      utterance.rate = 0.8
      speechSynthesis.speak(utterance)
    }
  }

  const startReading = (level: string) => {
    setCurrentLevel(level)
    setCurrentStory(0)
    setShowQuestions(false)
    setUserAnswers([])
    setScore(0)
    setShowResults(false)
  }

  const checkAnswers = () => {
    const currentStoryData = readingStories[lang][currentLevel as keyof ReadingStoriesByLevel][currentStory]
    let correctAnswers = 0
    
    userAnswers.forEach((answer, index) => {
      if (answer.toLowerCase().includes(currentStoryData.questions[index].answer.toLowerCase())) {
        correctAnswers++
      }
    })

    const newScore = Math.round((correctAnswers / currentStoryData.questions.length) * 100)
    setScore(newScore)
    setShowResults(true)

    // Update progress
    const newProgress = { ...progress }
    if (!newProgress.reading) newProgress.reading = { beginner: 0, intermediate: 0, advanced: 0 }
    newProgress.reading[currentLevel as keyof typeof newProgress.reading] += newScore
    setProgress(newProgress)
  }

  const nextStory = () => {
    const stories = readingStories[lang][currentLevel as keyof ReadingStoriesByLevel]
    if (currentStory < stories.length - 1) {
      setCurrentStory(currentStory + 1)
      setShowQuestions(false)
      setUserAnswers([])
      setShowResults(false)
    } else {
      setCurrentLevel(null)
    }
  }

  if (currentLevel && readingStories[lang][currentLevel as keyof ReadingStoriesByLevel]) {
    const stories = readingStories[lang][currentLevel as keyof ReadingStoriesByLevel]
    const currentStoryData = stories[currentStory]

    return (
      <div className="min-h-screen bg-gradient-to-br from-green-400 via-blue-500 to-purple-600 p-4">
        <div className="max-w-4xl mx-auto">
          {/* Language Selector */}
          <div className="flex justify-end gap-2 mb-2">
            <button onClick={() => setLang('fr')} aria-label="Fran√ßais" className={lang==='fr'?"opacity-100 scale-110":"opacity-60 hover:opacity-100"} style={{fontSize:'2rem',transition:'all 0.2s'}}>
              üá´üá∑
            </button>
            <button onClick={() => setLang('es')} aria-label="Espa√±ol" className={lang==='es'?"opacity-100 scale-110":"opacity-60 hover:opacity-100"} style={{fontSize:'2rem',transition:'all 0.2s'}}>
              üá™üá∏
            </button>
            <button onClick={() => setLang('en')} aria-label="English" className={lang==='en'?"opacity-100 scale-110":"opacity-60 hover:opacity-100"} style={{fontSize:'2rem',transition:'all 0.2s'}}>
              üá¨üáß
            </button>
          </div>

          {/* Header */}
          <div className="flex items-center justify-between mb-6">
            <Button onClick={() => setCurrentLevel(null)} variant="outline" className="bg-white/20 text-white border-white/30">
              <ArrowLeft className="h-4 w-4 mr-2" />
              {t.back}
            </Button>
            <h1 className="text-3xl font-bold text-white drop-shadow-lg">{t.reading}</h1>
            <div className="text-white font-semibold">
              {t.level}: {currentLevel === 'beginner' ? t.beginner : currentLevel === 'intermediate' ? t.intermediate : t.advanced}
            </div>
          </div>

          {/* Story Card */}
          <Card className="mb-6 bg-white/95 backdrop-blur-sm shadow-xl">
            <CardHeader>
              <CardTitle className="flex items-center gap-3 text-2xl">
                <span className="text-4xl">{currentStoryData.emoji}</span>
                {currentStoryData.title}
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-lg leading-relaxed mb-6 text-gray-800">
                {currentStoryData.text}
              </div>
              
              <div className="flex gap-4">
                <Button 
                  onClick={() => speakText(currentStoryData.text)}
                  className="bg-blue-500 hover:bg-blue-600"
                >
                  <Volume2 className="h-4 w-4 mr-2" />
                  {t.listenStory}
                </Button>
                
                {!showQuestions && (
                  <Button 
                    onClick={() => setShowQuestions(true)}
                    className="bg-green-500 hover:bg-green-600"
                  >
                    <Eye className="h-4 w-4 mr-2" />
                    {t.seeQuestions}
                  </Button>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Questions */}
          {showQuestions && !showResults && (
            <Card className="mb-6 bg-white/95 backdrop-blur-sm shadow-xl">
              <CardHeader>
                <CardTitle className="text-xl">{t.comprehensionQuestions}</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {currentStoryData.questions.map((q, index) => (
                    <div key={index} className="space-y-2">
                      <label className="text-lg font-medium text-gray-800">
                        {index + 1}. {q.question}
                      </label>
                      <input
                        type="text"
                        value={userAnswers[index] || ''}
                        onChange={(e) => {
                          const newAnswers = [...userAnswers]
                          newAnswers[index] = e.target.value
                          setUserAnswers(newAnswers)
                        }}
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        placeholder={t.yourAnswer}
                      />
                    </div>
                  ))}
                </div>
                
                <Button 
                  onClick={checkAnswers}
                  className="mt-6 bg-purple-500 hover:bg-purple-600 w-full"
                >
                  <Check className="h-4 w-4 mr-2" />
                  {t.checkAnswers}
                </Button>
              </CardContent>
            </Card>
          )}

          {/* Results */}
          {showResults && (
            <Card className="mb-6 bg-white/95 backdrop-blur-sm shadow-xl">
              <CardHeader>
                <CardTitle className="text-xl">{t.results}</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-center">
                  <div className="text-4xl mb-4">
                    {score >= 80 ? 'üéâ' : score >= 60 ? 'üëç' : 'üí™'}
                  </div>
                  <div className="text-2xl font-bold mb-2">
                    {t.score}: {score}%
                  </div>
                  <div className="text-gray-600 mb-4">
                    {score >= 80 ? t.correctAnswers : score >= 60 ? 'Bon travail !' : 'Continue √† t\'entra√Æner !'}
                  </div>
                  
                  <div className="flex gap-4 justify-center">
                    <Button 
                      onClick={() => {
                        setShowQuestions(false)
                        setUserAnswers([])
                        setShowResults(false)
                      }}
                      variant="outline"
                    >
                      <RotateCcw className="h-4 w-4 mr-2" />
                      {t.restart}
                    </Button>
                    
                    <Button 
                      onClick={nextStory}
                      className="bg-green-500 hover:bg-green-600"
                    >
                      <Book className="h-4 w-4 mr-2" />
                      {t.nextStory}
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {/* Progress */}
          <div className="text-center text-white">
            <div className="text-lg">
              {t.story} {currentStory + 1} {t.of} {stories.length}
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-400 via-blue-500 to-purple-600 p-4">
      <div className="max-w-4xl mx-auto">
        {/* Language Selector */}
        <div className="flex justify-end gap-2 mb-2">
          <button onClick={() => setLang('fr')} aria-label="Fran√ßais" className={lang==='fr'?"opacity-100 scale-110":"opacity-60 hover:opacity-100"} style={{fontSize:'2rem',transition:'all 0.2s'}}>
            üá´üá∑
          </button>
          <button onClick={() => setLang('es')} aria-label="Espa√±ol" className={lang==='es'?"opacity-100 scale-110":"opacity-60 hover:opacity-100"} style={{fontSize:'2rem',transition:'all 0.2s'}}>
            üá™üá∏
          </button>
          <button onClick={() => setLang('en')} aria-label="English" className={lang==='en'?"opacity-100 scale-110":"opacity-60 hover:opacity-100"} style={{fontSize:'2rem',transition:'all 0.2s'}}>
            üá¨üáß
          </button>
        </div>

        {/* Header */}
        <div className="text-center mb-8 pt-8">
          <Button onClick={onBack} variant="outline" className="absolute top-8 left-8 bg-white/20 text-white border-white/30">
            <ArrowLeft className="h-4 w-4 mr-2" />
            {t.back}
          </Button>
          <h1 className="text-4xl font-bold text-white mb-2 drop-shadow-lg">{t.reading}</h1>
          <p className="text-xl text-white/90 drop-shadow">{t.developComprehension}</p>
        </div>

        {/* Level Selection */}
        <div className="grid md:grid-cols-3 gap-6">
          <Card
            className="bg-white/95 backdrop-blur-sm shadow-xl hover:shadow-2xl transition-all duration-300 cursor-pointer transform hover:scale-105"
            onClick={() => startReading('beginner')}
          >
            <CardHeader className="text-center">
              <div className="mx-auto w-16 h-16 bg-gradient-to-br from-green-500 to-emerald-500 rounded-full flex items-center justify-center mb-4">
                <BookOpen className="h-8 w-8 text-white" />
              </div>
              <CardTitle className="text-2xl text-gray-800">{t.beginner}</CardTitle>
            </CardHeader>
            <CardContent className="text-center">
              <div className="space-y-2 text-gray-600">
                <div>{t.simpleStories}</div>
                <div>{t.shortTexts}</div>
                <div>{t.basicQuestions}</div>
              </div>
            </CardContent>
          </Card>

          <Card
            className="bg-white/95 backdrop-blur-sm shadow-xl hover:shadow-2xl transition-all duration-300 cursor-pointer transform hover:scale-105"
            onClick={() => startReading('intermediate')}
          >
            <CardHeader className="text-center">
              <div className="mx-auto w-16 h-16 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-full flex items-center justify-center mb-4">
                <BookOpen className="h-8 w-8 text-white" />
              </div>
              <CardTitle className="text-2xl text-gray-800">{t.intermediate}</CardTitle>
            </CardHeader>
            <CardContent className="text-center">
              <div className="space-y-2 text-gray-600">
                <div>{t.longerStories}</div>
                <div>{t.vocabulary}</div>
                <div>{t.detailedQuestions}</div>
              </div>
            </CardContent>
          </Card>

          <Card
            className="bg-white/95 backdrop-blur-sm shadow-xl hover:shadow-2xl transition-all duration-300 cursor-pointer transform hover:scale-105"
            onClick={() => startReading('advanced')}
          >
            <CardHeader className="text-center">
              <div className="mx-auto w-16 h-16 bg-gradient-to-br from-purple-500 to-pink-500 rounded-full flex items-center justify-center mb-4">
                <BookOpen className="h-8 w-8 text-white" />
              </div>
              <CardTitle className="text-2xl text-gray-800">{t.advanced}</CardTitle>
            </CardHeader>
            <CardContent className="text-center">
              <div className="space-y-2 text-gray-600">
                <div>{t.longerStories}</div>
                <div>{t.vocabulary}</div>
                <div>{t.complexQuestions}</div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Progress Overview */}
        <Card className="mt-8 bg-white/95 backdrop-blur-sm shadow-xl">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-2xl">
              <Star className="h-6 w-6 text-yellow-500" />
              {t.progress}
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-3 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-green-600">
                  {progress?.reading?.beginner || 0}
                </div>
                <div className="text-sm text-gray-600">{t.beginner}</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-blue-600">
                  {progress?.reading?.intermediate || 0}
                </div>
                <div className="text-sm text-gray-600">{t.intermediate}</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-purple-600">
                  {progress?.reading?.advanced || 0}
                </div>
                <div className="text-sm text-gray-600">{t.advanced}</div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
} 